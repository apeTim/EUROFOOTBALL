from telegram import ReplyKeyboardMarkup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler
from .MatchFunctionsFile import MatchFunctions
from .TicketFunctionsFile import TicketFunctions
from .UserFunctionsFile import UserFunctions

back_button = [['‚¨ÖÔ∏è–ù–∞–∑–∞–¥']]

MATCH_TICKET_CLASSES = [['1', '2', '3'], ['1OV', '2OV', '3OV'], ['VIP']]

class SellerFunctions(UserFunctions):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.match_functions = MatchFunctions()
        self.ticket_functions = TicketFunctions()

    # –§—É–Ω–∫—Ü–∏–∏ –ö–ª–∞—Å—Å–∞
    def match_tickets_sell_type(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup(MATCH_TICKET_CLASSES + back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞", reply_markup=markup)
            return 4
        if (not update.message.text.isdigit()) or (not int(update.message.text) > 0):
            self.notDigitError(update)
            return 5

        markup = ReplyKeyboardMarkup([['–ü–æ –æ–¥–∏–Ω–æ—á–∫–µ'], ['–ü–æ –ø–∞—Ä–∞–º']] + back_button, one_time_keyboard=False, resize_keyboard=True)
        context.user_data['match_tickets_number'] = update.message.text
        self.bot.sendMessage(self.chatId(update), "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã?", reply_markup=markup)
        return 6
        
    def match_ticket_price(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup(back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å? (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", reply_markup=markup)
            return 5
        if not update.message.text in ['–ü–æ –æ–¥–∏–Ω–æ—á–∫–µ', '–ü–æ –ø–∞—Ä–∞–º']:
            self.notKeyboardShortcutError(update)
            return 6

        markup = ReplyKeyboardMarkup(back_button, one_time_keyboard=False, resize_keyboard=True)
        context.user_data['match_tickets_sell_type'] = update.message.text
        self.bot.sendMessage(self.chatId(update), "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–∏–Ω –±–∏–ª–µ—Ç (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", reply_markup=markup)
        return 7
    
    def match_ticket_description(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup([['–ü–æ –æ–¥–∏–Ω–æ—á–∫–µ'], ['–ü–æ –ø–∞—Ä–∞–º']] + back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã?", reply_markup=markup)
            return 6
        if (not update.message.text.replace(" ", "").isdigit()) or (not int(update.message.text.replace(" ", "")) > 0):
            self.notDigitError(update)
            return 7
        
        markup = ReplyKeyboardMarkup(back_button, one_time_keyboard=False, resize_keyboard=True)
        context.user_data['match_ticket_price'] = update.message.text
        self.bot.sendMessage(self.chatId(update), "–í –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n-–±—É–º–∞–∂–Ω—ã–π –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç;\n-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –ª–∏—á–Ω–æ;\n-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥—É;\n-—Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã(–Ω–∞–ª/–±–Ω/–∫—Ä–∏–ø—Ç–∞);", reply_markup=markup)
        return 8

    def ticket_review(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup(back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–∏–Ω –±–∏–ª–µ—Ç (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", reply_markup=markup)
            return 7
        context.user_data['match_ticket_description'] = update.message.text
        markup = ReplyKeyboardMarkup([['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å']] + back_button, one_time_keyboard=False, resize_keyboard=True)
        ticket_review = f'''–°—Ç–∞–¥–∏—è: {context.user_data["match_stage"]}\n–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞: {context.user_data["match_group_or_date"]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data["match_ticket_class"]}\n–ú–∞—Ç—á: {context.user_data["match_name"]}\n–í –Ω–∞–ª–∏—á–∏–∏: {context.user_data["match_tickets_number"]}\n–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {context.user_data["match_tickets_sell_type"]}\n–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {context.user_data["match_ticket_price"]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{context.user_data["match_ticket_description"]}'''
        self.bot.sendMessage(self.chatId(update), ticket_review, reply_markup=markup)
        return 9

    def ticket_confirm(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup(back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–í –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n-–±—É–º–∞–∂–Ω—ã–π –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç;\n-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –ª–∏—á–Ω–æ;\n-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥—É;\n-—Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã(–Ω–∞–ª/–±–Ω/–∫—Ä–∏–ø—Ç–∞);", reply_markup=markup)
            return 8
        if update.message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            result = self.ticket_functions.create_ticket(context.user_data, update.message.chat_id, update.message.from_user.first_name + ' ' + update.message.from_user.last_name )
            self.bot.sendMessage(self.chatId(update), "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", reply_markup=self.main_keyboard)
            return ConversationHandler.END
        else:
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–±–æ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', –ª–∏–±–æ '‚¨ÖÔ∏è–ù–∞–∑–∞–¥'")
            return 9

    def send_user_listed_tickets(self, update, context):
        listed_tickets = self.ticket_functions.user_listed_tickets(update.message.chat_id)
        if not listed_tickets:
            return ConversationHandler.END
        context.user_data["listed_tickets"] = [list(x) for x in listed_tickets]
        ticket = listed_tickets[0]
        if len(listed_tickets) == 1:
            keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data='delete:0'),
                InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit:0')
            ]
            ]
        else:
            keyboard = [
            [
                InlineKeyboardButton("‚û°Ô∏è–í–ø–µ—Ä—ë–¥", callback_data='forward:1'),
            ],
            [
                InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data='delete:0'),
                InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit:0')
            ]
            ]
            markup = InlineKeyboardMarkup(keyboard)
        r = self.bot.sendMessage(self.chatId(update), f'''<b>–°—Ç–∞–¥–∏—è:</b> {ticket[3]}\n<b>–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞:</b> {ticket[4]}\n<b>–ú–∞—Ç—á:</b> {ticket[5]}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–ª–µ—Ç–∞:</b> {ticket[6]}\n<b>–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤:</b> {ticket[7]}\n<b>–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏:</b> {ticket[8]}\n<b>–¶–µ–Ω–∞ –∑–∞ —à—Ç.:</b> {ticket[9]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{ticket[10]}''', reply_markup=markup, parse_mode='HTML')
        context.user_data["current_message_id"] = r.message_id
        context.user_data["current_reply_markup"] = markup
        return 1
    
    def edit_message_chooser(self, update, context):
        action, ticket_id = update.callback_query.data.split(':')
        if action == 'edit_sell_type':
            markup = ReplyKeyboardMarkup([['–ü–æ –æ–¥–∏–Ω–æ—á–∫–µ'], ['–ü–æ –ø–∞—Ä–∞–º']] + back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(update.callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤', reply_markup=markup)
            context.user_data["edit_field"] = 'sell_type'
            return 3
        elif action == 'edit_price':
            self.bot.sendMessage(update.callback_query.from_user.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞')
            context.user_data["edit_field"] = 'price'
            return 3
        elif action == 'edit_description':
            self.bot.sendMessage(update.callback_query.from_user.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
            context.user_data["edit_field"] = 'description'
            return 3
        elif action == 'go_back':
            ticket = context.user_data["listed_tickets"][int(ticket_id)]
            message_text =  f'''<b>–°—Ç–∞–¥–∏—è:</b> {ticket[3]}\n<b>–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞:</b> {ticket[4]}\n<b>–ú–∞—Ç—á:</b> {ticket[5]}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–ª–µ—Ç–∞:</b> {ticket[6]}\n<b>–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤:</b> {ticket[7]}\n<b>–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏:</b> {ticket[8]}\n<b>–¶–µ–Ω–∞ –∑–∞ —à—Ç.:</b> {ticket[9]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{ticket[10]}'''
            self.bot.editMessageText(message_text, chat_id=update.callback_query.from_user.id, message_id=context.user_data["current_message_id"], reply_markup=context.user_data["current_reply_markup"], parse_mode='HTML')
            return 1

    
    def edit_message(self, update, context):
        current_ticket_id = context.user_data["current_ticket_id"]
        edit_field = context.user_data["edit_field"]
        message_text = update.message.text
        if edit_field == 'sell_type':
            if message_text not in ['–ü–æ –æ–¥–∏–Ω–æ—á–∫–µ', '–ü–æ –ø–∞—Ä–∞–º']:
                markup = ReplyKeyboardMarkup([['–ü–æ –æ–¥–∏–Ω–æ—á–∫–µ'], ['–ü–æ –ø–∞—Ä–∞–º']] + back_button, one_time_keyboard=False, resize_keyboard=True)
                self.bot.sendMessage(self.chatId(update), '–î–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!', reply_markup=markup)
                return 3
            context.user_data["listed_tickets"][int(current_ticket_id)][8] = message_text
            ticket_id = context.user_data["listed_tickets"][int(current_ticket_id)][0]
            self.ticket_functions.edit_ticket(ticket_id, 'match_tickets_sell_type', message_text)
        elif edit_field == 'price':
            if (not message_text.isdigit()) or (int(message_text) < 0) :
                self.bot.sendMessage(self.chatId(update), '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')
                return 3
            context.user_data["listed_tickets"][int(current_ticket_id)][9] = message_text
            ticket_id = context.user_data["listed_tickets"][int(current_ticket_id)][0]
            self.ticket_functions.edit_ticket(ticket_id, 'match_ticket_price', message_text)
        elif edit_field == 'description':
            context.user_data["listed_tickets"][int(current_ticket_id)][10] = message_text
            ticket_id = context.user_data["listed_tickets"][int(current_ticket_id)][0]
            self.ticket_functions.edit_ticket(ticket_id, 'match_ticket_description', message_text)
        ticket = context.user_data["listed_tickets"][int(current_ticket_id)]
        message_text =  f'''<b>–°—Ç–∞–¥–∏—è:</b> {ticket[3]}\n<b>–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞:</b> {ticket[4]}\n<b>–ú–∞—Ç—á:</b> {ticket[5]}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–ª–µ—Ç–∞:</b> {ticket[6]}\n<b>–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤:</b> {ticket[7]}\n<b>–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏:</b> {ticket[8]}\n<b>–¶–µ–Ω–∞ –∑–∞ —à—Ç.:</b> {ticket[9]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{ticket[10]}'''
        self.bot.editMessageReplyMarkup(self.chatId(update), context.user_data["current_message_id"], reply_markup=None)
        self.bot.sendMessage(self.chatId(update), '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=self.main_keyboard)
        r = self.bot.sendMessage(self.chatId(update), message_text, reply_markup=context.user_data["current_reply_markup"], parse_mode='HTML')
        context.user_data["current_message_id"] = r.message_id
        return 1


    def switcher_user_listed_tickets(self, update, context):
        action, ticket_id = update.callback_query.data.split(':')
        context.user_data["current_ticket_id"] = ticket_id
        if action == 'edit':
            ticket = context.user_data["listed_tickets"][int(ticket_id)]
            if ticket == 'deleted':
                self.bot.answerCallbackQuery(update.callback_query.id, text='–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
                return 1
            keyboard = [
            [
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–∏–ø –ü—Ä–æ–¥–∞–∂–∏", callback_data=f'edit_sell_type:{int(ticket_id)}')
            ],
            [
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¶–µ–Ω—É –±–∏–ª–µ—Ç–∞", callback_data=f'edit_price:{int(ticket_id)}')
            ],
            [
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_description:{int(ticket_id)}')
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'go_back:{int(ticket_id)}')
            ],
            ]
            markup = InlineKeyboardMarkup(keyboard)
            self.bot.editMessageReplyMarkup(update.callback_query.from_user.id, context.user_data["current_message_id"], reply_markup=markup)
            return 2

        elif action == 'delete':
            keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_confirm:{int(ticket_id)}'),
                InlineKeyboardButton("üîÅ–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'delete_cancel:{int(ticket_id)}'),
            ]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            self.bot.editMessageText('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –±–∏–ª–µ—Ç?\n–û—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', chat_id=update.callback_query.from_user.id, message_id=context.user_data["current_message_id"], reply_markup=markup)
        elif action == 'delete_confirm':
            ticket = context.user_data["listed_tickets"][int(ticket_id)]
            db_ticket_id = ticket[0]
            context.user_data["listed_tickets"][int(ticket_id)] = 'deleted'
            self.ticket_functions.delete_ticket_by_id(db_ticket_id)
            self.bot.editMessageText('–î–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', chat_id=update.callback_query.from_user.id, message_id=context.user_data["current_message_id"], reply_markup=context.user_data["current_reply_markup"])
        elif action == 'delete_cancel':
            ticket = context.user_data["listed_tickets"][int(ticket_id)]
            message_text =  f'''<b>–°—Ç–∞–¥–∏—è:</b> {ticket[3]}\n<b>–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞:</b> {ticket[4]}\n<b>–ú–∞—Ç—á:</b> {ticket[5]}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–ª–µ—Ç–∞:</b> {ticket[6]}\n<b>–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤:</b> {ticket[7]}\n<b>–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏:</b> {ticket[8]}\n<b>–¶–µ–Ω–∞ –∑–∞ —à—Ç.:</b> {ticket[9]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{ticket[10]}'''
            self.bot.editMessageText(message_text, chat_id=update.callback_query.from_user.id, message_id=context.user_data["current_message_id"], reply_markup=context.user_data["current_reply_markup"], parse_mode='HTML')
        elif action == 'forward':
            self.bot.deleteMessage(update.callback_query.from_user.id, update.callback_query.message.message_id)
            ticket = context.user_data["listed_tickets"][int(ticket_id)]
            if int(ticket_id) + 1 == len(context.user_data["listed_tickets"]):
                keyboard = [
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f'back:{int(ticket_id) - 1}'),
                ],
                [
                    InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete:{int(ticket_id)}'),
                    InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit:{int(ticket_id)}')
                ]
                ]
            else:
                keyboard = [
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f'back:{int(ticket_id) - 1}'),
                    InlineKeyboardButton("‚û°Ô∏è–í–ø–µ—Ä—ë–¥", callback_data=f'forward:{int(ticket_id) + 1}'),
                ],
                [
                    InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete:{int(ticket_id)}'),
                    InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit:{int(ticket_id)}')
                ]
                ]
            markup = InlineKeyboardMarkup(keyboard)
            if ticket == 'deleted':
                message_text = '–î–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'
            else:
                message_text =  f'''<b>–°—Ç–∞–¥–∏—è:</b> {ticket[3]}\n<b>–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞:</b> {ticket[4]}\n<b>–ú–∞—Ç—á:</b> {ticket[5]}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–ª–µ—Ç–∞:</b> {ticket[6]}\n<b>–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤:</b> {ticket[7]}\n<b>–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏:</b> {ticket[8]}\n<b>–¶–µ–Ω–∞ –∑–∞ —à—Ç.:</b> {ticket[9]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{ticket[10]}'''
            r = self.bot.sendMessage(update.callback_query.from_user.id, message_text, reply_markup=markup, parse_mode='HTML')
            context.user_data["current_message_id"] = r.message_id
            context.user_data["current_reply_markup"] = markup
        elif action == 'back':
            self.bot.deleteMessage(update.callback_query.from_user.id, update.callback_query.message.message_id)
            ticket = context.user_data["listed_tickets"][int(ticket_id)]
            if int(ticket_id) == 0:
                keyboard = [
                [
                    InlineKeyboardButton("‚û°Ô∏è–í–ø–µ—Ä—ë–¥", callback_data=f'forward:{int(ticket_id) + 1}'),
                ],
                [
                    InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete:{int(ticket_id)}'),
                    InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit:{int(ticket_id)}')
                ]
                ]
            else:
                keyboard = [
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f'back:{int(ticket_id) - 1}'),
                    InlineKeyboardButton("‚û°Ô∏è–í–ø–µ—Ä—ë–¥", callback_data=f'forward:{int(ticket_id) + 1}'),
                ],
                [
                    InlineKeyboardButton("üóëÔ∏è–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete:{int(ticket_id)}'),
                    InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit:{int(ticket_id)}')
                ]
                ]
            markup = InlineKeyboardMarkup(keyboard)
            if ticket == 'deleted':
                message_text = '–î–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'
            else:
                message_text =  f'''<b>–°—Ç–∞–¥–∏—è:</b> {ticket[3]}\n<b>–î–∞—Ç–∞/–ì—Ä—É–ø–ø–∞:</b> {ticket[4]}\n<b>–ú–∞—Ç—á:</b> {ticket[5]}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–∏–ª–µ—Ç–∞:</b> {ticket[6]}\n<b>–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤:</b> {ticket[7]}\n<b>–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏:</b> {ticket[8]}\n<b>–¶–µ–Ω–∞ –∑–∞ —à—Ç.:</b> {ticket[9]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{ticket[10]}'''
            r = self.bot.sendMessage(update.callback_query.from_user.id, message_text, reply_markup=markup, parse_mode='HTML')
            context.user_data["current_message_id"] = r.message_id
            context.user_data["current_reply_markup"] = markup
        return 1

    def stop_callback_conversation(self, update, context):
        if len(context.user_data["listed_tickets"]) > 1:
            self.bot.editMessageReplyMarkup(self.chatId(update), context.user_data["current_message_id"], reply_markup=None)
        self.bot.sendMessage(self.chatId(update), "–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω", reply_markup=self.main_keyboard)
        return ConversationHandler.END

    def stop(self, update, context):
        return ConversationHandler.END 