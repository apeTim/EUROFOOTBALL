from telegram import ReplyKeyboardMarkup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler
from .MatchFunctionsFile import MatchFunctions
from .TicketFunctionsFile import TicketFunctions
from .BotMainFunctionsFile import BotMainFunctions
import sqlite3
import json

QUESTIONS = ["–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É/–¥–∞—Ç—É", "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞", "–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å? (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–µ (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–∏–Ω –±–∏–ª–µ—Ç (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", "–í –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n-–±—É–º–∞–∂–Ω—ã–π –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç;\n-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –ª–∏—á–Ω–æ;\n-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥—É;\n-—Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã(–Ω–∞–ª/–±–Ω/–∫—Ä–∏–ø—Ç–∞);" ]

MATCH_DATA = {
    '–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø': [['A', 'B'], ['C', 'D'], ['E', 'F']],
    '1/8 —Ñ–∏–Ω–∞–ª–∞': [['26.06.21'], ['27.06.21'], ['28.06.21']],
    '1/4 —Ñ–∏–Ω–∞–ª–∞': [['02.07.21'], ['03.07.21']],
    '1/2 —Ñ–∏–Ω–∞–ª–∞': [['06.07.21'], ['07.07.21']],
    '–§–∏–Ω–∞–ª': [['11.07.21']]
}

MATCH_GROUPS_OR_DATES = ['A', 'B', 'C', 'D', 'E', 'F', '26.06.21', '27.06.21', '28.06.21', '02.07.21', '03.07.21', '06.07.21', '07.07.21', '11.07.21'  ]

MATCH_TICKET_CLASSES = [['1', '2', '3'], ['1OV', '2OV', '3OV'], ['VIP']]

back_button = [['‚¨ÖÔ∏è–ù–∞–∑–∞–¥']]

menu_button = [['üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

tomenu_button = [['üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

trust_coefs = {
    '–ó–Ω–∞–∫–æ–º –ª–∏—á–Ω–æ': 2,
    '–ò–º–µ–ª –¥–µ–ª–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ': 1.5,
    '–ó–Ω–∞–∫–æ–º—ã–µ –∏–º–µ–ª–∏ –¥–µ–ª–æ': 1
}

class UserFunctions():
    def __init__(self, bot=''):
        if bot:
            self.bot = bot
        self.tomenu_keyboard = ReplyKeyboardMarkup([['üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
        self.bot_functions = BotMainFunctions()
        self.main_keyboard = ReplyKeyboardMarkup([['üõí–ö—É–ø–∏—Ç—å', 'üí∞–ü—Ä–æ–¥–∞—Ç—å'], ['üìú–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'], ['üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üåü–û—Ü–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'], ['‚úâÔ∏è–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞']], one_time_keyboard=False, resize_keyboard=True)
        pass

    # –ü–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def chatId(self, update):
        return update.message.chat_id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
    def notKeyboardShortcutError(self, update):
        self.bot.sendMessage(self.chatId(update), "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!")
    
    def notDigitError(self, update):
        self.bot.sendMessage(self.chatId(update), "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø.—Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞")
    
    # –§—É–Ω–∫—Ü–∏–∏ –°—Ç–µ–ø–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
    def get_verification_status(self, user_id):
        with sqlite3.connect('bot.db') as db_connection:
            cursor = db_connection.cursor()
            command = '''SELECT verification_status FROM users WHERE user_id = ?'''
            verification_status = cursor.execute(command, (user_id, )).fetchone()[0]
            cursor.close()
        return verification_status

    def user_profile(self, update, context):
        with sqlite3.connect('bot.db') as db_connection:
            cursor = db_connection.cursor()
            command = f'''SELECT * FROM users WHERE user_id = ?'''
            r = cursor.execute(command, (update.message.chat_id,)).fetchone()
            if r[5] == 0:
                trust = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'
            else:
                trust = round(r[4] / r[5], 2)
            markup = ReplyKeyboardMarkup([["üõÇ–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"], ["üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            if r[9] == 'VERIFICATED':
                verificaion_status = '–ü—Ä–æ–π–¥–µ–Ω–∞'
            else:
                verificaion_status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'
            self.bot.sendMessage(self.chatId(update), f"{r[2]} {r[3]}\n\nüåü–°—Ç–µ–ø–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {trust}\nüåü–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verificaion_status}", reply_markup=markup)
            cursor.close()
        return 1
    
    def choose_profile_action(self, update, context):
        if update.message.text == 'üõÇ–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é':
            verification_status = self.get_verification_status(self.chatId(update))
            print(verification_status)
            if verification_status == 'VERIFICATED':
                markup = ReplyKeyboardMarkup([["üõÇ–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"], ["üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
                self.bot.sendMessage(self.chatId(update), f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", reply_markup=markup)
                return 1
            self.bot.sendMessage(self.chatId(update), f"–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –í—ã –¥–µ—Ä–∂–∏—Ç–µ –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –≤ —Ä—É–∫–∞—Ö —Ä—è–¥–æ–º —Å –í–∞—à–∏–º –ª–∏—Ü–æ–º –Ω–∞ —Ñ–æ–Ω–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å–æ –º–Ω–æ–π(Bot Fedor). –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞, —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –∞ —Ç–∞–∫–∂–µ –í–∞—à–µ –ª–∏—Ü–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞ –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.", reply_markup=self.tomenu_keyboard)
            return 2
        elif update.message.text == 'üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            self.bot.sendMessage(self.chatId(update), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=self.main_keyboard)
            return ConversationHandler.END
    
    def picture_sent(self, update, context):
        print("–ó–¥–µ—Å—å!")
        file_id = update.message.photo[0].file_id
        newFile = self.bot.getFile(file_id)
        newFileLink = newFile.file_path
        self.save_verification_request(newFileLink, self.chatId(update))
        markup = ReplyKeyboardMarkup([["üõÇ–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"], ["üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        self.bot.sendMessage(self.chatId(update), "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", reply_markup=markup)
        return 1
    
    def save_verification_request(self, file_link, user_id):
        with sqlite3.connect('bot.db') as db_connection:
            cursor = db_connection.cursor()
            command = command = f'''UPDATE users SET verification_link = ?, verification_status = "WAITING" WHERE user_id = ?'''
            cursor.execute(command, (file_link, user_id))
            db_connection.commit()
            cursor.close()

    
    def trust_user_nickname(self, update, context):
        print("–•–æ—Ç—è—Ç –æ—Ü–µ–Ω–∏—Ç—å!")
        self.bot.sendMessage(self.chatId(update), "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å", reply_markup=self.tomenu_keyboard)
        return 1

    def trust_user_relationships(self, update, context):
        if update.message.text == 'üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            self.bot.sendMessage(self.chatId(update), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=self.main_keyboard)
            return ConversationHandler.END
        if update.message.text.replace('@', '').lower() == update.message.from_user.username.lower():
            print("–û—à–∏–±–∫–∞")
            self.bot.sendMessage(self.chatId(update), "–ù–µ–ª—å–∑—è –æ—Ü–µ–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è", reply_markup=self.tomenu_keyboard)
            return 1
        existing_user = self.bot_functions.check_user_in_db_by_nickname(update.message.text.replace('@', ''))
        if not existing_user:
            print("–û—à–∏–±–∫–∞")
            self.bot.sendMessage(self.chatId(update), "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ")
            return 1
        else:
            print("–ù–∏–∫–Ω–µ–π–º –≤–≤–µ–¥—ë–Ω –≤—Å—ë –æ–∫!")
            trusted_users = json.loads(existing_user[6])
            context.user_data["trust_trusted_users"] = trusted_users
            context.user_data["trust_nikcname"] = update.message.text.replace('@', '').lower()
            markup = ReplyKeyboardMarkup([['–ó–Ω–∞–∫–æ–º –ª–∏—á–Ω–æ'], ['–ò–º–µ–ª –¥–µ–ª–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ'], ['–ó–Ω–∞–∫–æ–º—ã–µ –∏–º–µ–ª–∏ –¥–µ–ª–æ']] + back_button, resize_keyboard=True)
            if str(self.chatId(update)) in trusted_users:
                self.bot.sendMessage(self.chatId(update), "–í –∫–∞–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?\n\nP.S: –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –≤–∞—à –≥–æ–ª–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω", reply_markup=markup)
            else:
                self.bot.sendMessage(self.chatId(update), "–í –∫–∞–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?", reply_markup=markup)
            return 2
        
    def trust_user_trust(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            self.bot.sendMessage(self.chatId(update), "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å", reply_markup=self.tomenu_keyboard)
            return 1
        if update.message.text not in trust_coefs:
            print("–û—à–∏–±–∫–∞")
            self.notKeyboardShortcutError(update)
            return 1
        print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç!")
        context.user_data["trust_relations"] = update.message.text
        self.bot.sendMessage(self.chatId(update), "–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç -10 –¥–æ +10", reply_markup=ReplyKeyboardMarkup(back_button, resize_keyboard=True))
        return 3
    
    def trust_user_end(self, update, context):
        vote_number = update.message.text.replace('+', '').replace('-', '')
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup([['–ó–Ω–∞–∫–æ–º –ª–∏—á–Ω–æ'], ['–ò–º–µ–ª –¥–µ–ª–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ'], ['–ó–Ω–∞–∫–æ–º—ã–µ –∏–º–µ–ª–∏ –¥–µ–ª–æ']] + back_button, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–í –∫–∞–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", reply_markup=markup)
            return 2
        if not vote_number.isdigit():
            self.bot.sendMessage(self.chatId(update), "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (–ª–∏–±–æ +, –ª–∏–±–æ -)")
            return 3
        if not (update.message.text[0] == '+' or update.message.text[0] == '-') or not (int(vote_number) <= 10 and int(vote_number) >= 0):
            self.bot.sendMessage(self.chatId(update), "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - -10\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - +10")
            return 3
        with sqlite3.connect('bot.db') as db_connection:
            cursor = db_connection.cursor()
            print(context.user_data["trust_nikcname"])
            if str(self.chatId(update)) in context.user_data["trust_trusted_users"]:
                print("–û—Ü–µ–Ω–∫–∞ –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ!")
                prev_dict = context.user_data["trust_trusted_users"]
                if prev_dict[str(self.chatId(update))][0] == '-':
                    delete_prev_number = "+" + prev_dict[str(self.chatId(update))][1:]
                else:
                    delete_prev_number = "-" + prev_dict[str(self.chatId(update))][1:]
                print("delete_prev_number", delete_prev_number)
                calulate_addition_to_trust = str(eval(f"{delete_prev_number} {update.message.text[0] + (str(int(vote_number) * trust_coefs[context.user_data['trust_relations']]))}"))
                if calulate_addition_to_trust[0] != '-':
                    calulate_addition_to_trust = "+ " + calulate_addition_to_trust
                command = f'''UPDATE users SET trust = trust {calulate_addition_to_trust}, trusted_users = ? WHERE user_nickname = ?'''
                prev_dict[str(self.chatId(update))] = update.message.text[0] + str(int(vote_number) * trust_coefs[context.user_data["trust_relations"]])
                r = cursor.execute(command, ( json.dumps(prev_dict), context.user_data["trust_nikcname"] ) )
            else:
                print("–û—Ü–µ–Ω–∫–∞ –æ—Ç –Ω–æ–≤–æ–≥–æ!")
                command = f'''UPDATE users SET trust = trust {update.message.text[0]} {str(int(vote_number) * trust_coefs[context.user_data["trust_relations"]])}, trust_numbers = trust_numbers + 1, trusted_users = ? WHERE user_nickname = ?'''
                context.user_data["trust_trusted_users"][self.chatId(update)] = update.message.text[0] + str(int(vote_number) * trust_coefs[context.user_data["trust_relations"]])
                r = cursor.execute(command, ( json.dumps(context.user_data["trust_trusted_users"]), context.user_data["trust_nikcname"] ) )
            print("–£—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–ª–∏!")
            db_connection.commit()
            cursor.close()
            self.bot.sendMessage(self.chatId(update), "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", reply_markup=self.main_keyboard)
            return ConversationHandler.END


    # –§—É–Ω–∫—Ü–∏–∏ –ü—Ä–æ–¥–∞–∂–∏/–ü–æ–∫—É–ø–∫–∏
    def choose_match_stage(self, update, context):
        context.user_data['action'] = '–ü—Ä–æ–¥–∞—Ç—å'
        markup = ReplyKeyboardMarkup([[x] for x in MATCH_DATA] + tomenu_button, one_time_keyboard=False, resize_keyboard=True)
        self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é", reply_markup=markup)
        return 1

    def choose_match_date(self, update, context):
        if update.message.text == 'üè†–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            self.bot.sendMessage(self.chatId(update), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=self.main_keyboard)
            return ConversationHandler.END
        if not update.message.text in MATCH_DATA:
            self.notKeyboardShortcutError(update)
            return 1

        if update.message.text == '–§–∏–Ω–∞–ª':
            context.user_data['match_stage'] = update.message.text
            context.user_data['match_group_or_date'] = '11.07.21'
            context.user_data['match_name'] = '–§–ò–ù–ê–õ'
            markup = ReplyKeyboardMarkup(MATCH_TICKET_CLASSES + back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞", reply_markup=markup)
            return 4
        
        context.user_data['match_stage'] = update.message.text
        markup = ReplyKeyboardMarkup(MATCH_DATA[update.message.text] + back_button, one_time_keyboard=False, resize_keyboard=True)
        if update.message.text == '–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø':
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=markup)
        else:
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=markup)
        return 2

    def choose_match_name(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup([[x] for x in MATCH_DATA] + tomenu_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é", reply_markup=markup)
            return 1
    
        if not update.message.text in MATCH_GROUPS_OR_DATES:
            self.notKeyboardShortcutError(update)
            return 2

        context.user_data['match_group_or_date'] = update.message.text
        active_matches = self.match_functions.get_active(context.user_data)
        context.user_data['active_matches_to_show'] = active_matches
        markup = ReplyKeyboardMarkup([[x[0]] for x in active_matches] + back_button, one_time_keyboard=False, resize_keyboard=True)
        self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á", reply_markup=markup)
        return 3
    
    def choose_match_ticket_class(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            markup = ReplyKeyboardMarkup(MATCH_DATA[context.user_data["match_stage"]] + back_button, one_time_keyboard=False, resize_keyboard=True)
            if context.user_data["match_stage"] == '–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø':
                self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=markup)
            else:
                self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=markup)
            return 2

        if not (update.message.text,) in context.user_data['active_matches_to_show']:
            self.notKeyboardShortcutError(update)
            return 3

        context.user_data['match_name'] = update.message.text
        markup = ReplyKeyboardMarkup(MATCH_TICKET_CLASSES + back_button, one_time_keyboard=False, resize_keyboard=True)
        self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞", reply_markup=markup)
        return 4

    def choose_match_tickets_number(self, update, context):
        if update.message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            if context.user_data['match_stage'] == '–§–∏–Ω–∞–ª':
                markup = ReplyKeyboardMarkup([[x] for x in MATCH_DATA] + tomenu_button, one_time_keyboard=False, resize_keyboard=True)
                self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é", reply_markup=markup)
                return 1

            markup = ReplyKeyboardMarkup([[x[0]] for x in         context.user_data['active_matches_to_show']] + back_button, one_time_keyboard=False, resize_keyboard=True)
            self.bot.sendMessage(self.chatId(update), "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á", reply_markup=markup)
            return 3
        if not (update.message.text in MATCH_TICKET_CLASSES[0] or update.message.text in MATCH_TICKET_CLASSES[1] or update.message.text in MATCH_TICKET_CLASSES[2]):
            self.notKeyboardShortcutError(update)
            return 4
        
        markup = ReplyKeyboardMarkup(back_button + menu_button, one_time_keyboard=False, resize_keyboard=True)
        context.user_data['match_ticket_class'] = update.message.text
        self.bot.sendMessage(self.chatId(update), "–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å? (–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", reply_markup=markup)
        return 5

    def stop_conversation(self, update, context):
        self.bot.sendMessage(self.chatId(update), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=self.main_keyboard)
        return ConversationHandler.END

    def stop(self, update, context):
        return ConversationHandler.END 